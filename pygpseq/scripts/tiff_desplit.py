# ------------------------------------------------------------------------------
#
# MIT License
#
# Copyright (c) 2017 Gabriele Girelli
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
#
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Date: 20180316
# Project: bioimaging
# Description: split TIFF in smaller images.
#
# Changelog:
#  v1.0.0 - 20180316: converted from MATLAB to Python3 and merged with pygpseq.
#
# ------------------------------------------------------------------------------


# DEPENDENCIES =================================================================

import argparse
import configparser as cp
import numpy as np
import os
import sys
from tqdm import tqdm

from ggc.prompt import ask

from pygpseq.tools import image as imt
from pygpseq.tools import plot
from pygpseq.tools.io import printout


# FUNCTIONS ====================================================================
version = "1.1.0"


def clear_screen():
    print("\033[H\033[J")


def print_settings(args, clear=True):
    """Show input settings, for confirmation.

    Args:
        args (Namespace): arguments parsed by argparse.
        clear (bool): clear screen before printing.
    """

    s = " # TIFF desplit v%s\n" % version
    s += """
Input directory :  %s
    Output path :  %s
    """ % (
        args.indir,
        args.output,
    )

    print(s)
    return s


def run():

    # PARAMETERS ===================================================================

    # Add script description
    parser = argparse.ArgumentParser(
        description="""
    Merge previously split TIFF images into a bigger one. If the images were
    originally split with tiff_split, then the settings are read from the config.ini
    file. If the config file cannot be located, the settings must be specified by
    the user.

    Use -r to remove empty row/columns generated by splitting with the -e option.

    Examples:

    """,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "indir", type=str, help="""Path to the folder containing the split images."""
    )
    parser.add_argument("output", type=str, help="""Path to output TIFF file.""")

    parser.add_argument(
        "-S",
        "--step",
        metavar="slice",
        type=float,
        nargs="+",
        help="""Step used during splitting, defined as a fraction of
        the split images side(s). Default: 1""",
        default=[1, 1],
    )
    parser.add_argument(
        "-O",
        "--overlap",
        metavar="overlap",
        type=float,
        help="""Overlap fraction used during splitting, defined as a fraction of
        the split images side(s). Default: 0""",
        default=[0, 0],
    )
    parser.add_argument(
        "-R",
        "--regexp",
        metavar="re",
        type=str,
        help="""Regular expression for the identification of the split images.""",
        default="",
    )

    parser.add_argument(
        "-r",
        "--reduce",
        action="store_const",
        dest="reduce",
        const=True,
        default=False,
        help="Remove empty row/columns.",
    )
    parser.add_argument(
        "-I",
        "--invert",
        action="store_const",
        dest="inverted",
        const=True,
        default=False,
        help="""Split was performed top-to-bottom, left-to-right.""",
    )
    parser.add_argument(
        "-y",
        "--do-all",
        action="store_const",
        help="""Do not ask for settings confirmation and proceed.""",
        const=True,
        default=False,
    )

    parser.add_argument(
        "--version",
        action="version",
        version="%s %s"
        % (
            sys.argv[0],
            version,
        ),
    )

    args = parser.parse_args()

    assert os.path.isdir(args.indir), "input folder not found: %s" % args.indir
    assert_msg = "output path cannot be a directory: %s" % (args.output)
    assert not os.path.isdir(args.output), assert_msg

    # RUN ==========================================================================

    # END ==========================================================================

    clear_screen()
    if os.path.isfile(os.path.join(args.indir, "config.ini")):
        print("Loading settings from config.ini file...\n")
    else:
        print("Cannot find config.ini file in input directory.\n")

    print_settings(args)

    print("DONE")

    ################################################################################
